AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Repository:
    Description: "Repository name"
    Type: String
  Stage:
    Description: "Stage"
    Type: String
    AllowedValues:
      - qa
      - prod
  SecondLevelDomain:
    Description: "Second level domain name"
    Type: String
    Default: kusipay
  TopLevelDomain:
    Description: "Top level domain name"
    Type: String
    Default: com

Conditions:
  IsProd: !Equals [!Ref Stage, "prod"]

Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${Repository}-${Stage}"

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: !Sub "${Repository}-${Stage} Origin Access Control"
        Name: !Sub "${Repository}-${Stage}-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Enabled: true
        IPV6Enabled: true
        Comment: !Sub "${Repository}-${Stage} CloudFront Distribution"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          TargetOriginId: "S3Origin"
          ViewerProtocolPolicy: "redirect-to-https"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 300
        Origins:
          - Id: "S3Origin"
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Aliases:
          - !If [
              IsProd,
              !Sub "${SecondLevelDomain}.${TopLevelDomain}",
              !Sub "${Stage}.${SecondLevelDomain}.${TopLevelDomain}",
            ]
        ViewerCertificate:
          AcmCertificateArn:
            Fn::ImportValue: !Sub "${SecondLevelDomain}-${TopLevelDomain}-acmcertificatearn"
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: !Sub "${Repository}-${Stage} ${SecondLevelDomain}-${TopLevelDomain} record sets"
      HostedZoneId:
        Fn::ImportValue: !Sub "${SecondLevelDomain}-${TopLevelDomain}-hostedzoneid"
      RecordSets:
        - Name:
            !If [
              IsProd,
              !Sub "${SecondLevelDomain}.${TopLevelDomain}",
              !Sub "${Stage}.${SecondLevelDomain}.${TopLevelDomain}",
            ]
          Type: A
          AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
        - Name:
            !If [
              IsProd,
              !Sub "${SecondLevelDomain}.${TopLevelDomain}",
              !Sub "${Stage}.${SecondLevelDomain}.${TopLevelDomain}",
            ]
          Type: AAAA
          AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: "S3BucketPolicy"
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowCloudFrontAccess"
            Effect: "Allow"
            Principal:
              Service: cloudfront.amazonaws.com
            Action: "s3:GetObject"
            Resource: !Sub "${S3Bucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

Outputs:
  BucketName:
    Description: "Web bucket name"
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${Repository}-${Stage}-bucketname"
